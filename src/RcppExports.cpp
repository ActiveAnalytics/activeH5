// This file was generated by Rcpp::compileAttributes
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include "../inst/include/activeH5.h"
#include <Rcpp.h>
#include <string>
#include <set>

using namespace Rcpp;

// createFactor
SEXP createFactor(NumericVector x, CharacterVector levels);
static SEXP activeH5_createFactor_try(SEXP xSEXP, SEXP levelsSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP );
        Rcpp::traits::input_parameter< CharacterVector >::type levels(levelsSEXP );
        SEXP __result = createFactor(x, levels);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP activeH5_createFactor(SEXP xSEXP, SEXP levelsSEXP) {
    SEXP __result;
    {
        Rcpp::RNGScope __rngScope;
        __result = PROTECT(activeH5_createFactor_try(xSEXP, levelsSEXP));
    }
    Rboolean __isInterrupt = Rf_inherits(__result, "interrupted-error");
    if (__isInterrupt) {
        UNPROTECT(1);
        Rf_onintr();
    }
    Rboolean __isError = Rf_inherits(__result, "try-error");
    if (__isError) {
        SEXP __msgSEXP = Rf_asChar(__result);
        UNPROTECT(1);
        Rf_error(CHAR(__msgSEXP));
    }
    UNPROTECT(1);
    return __result;
}
// h5CreateFile
int h5CreateFile(std::string filePath, int overwrite);
static SEXP activeH5_h5CreateFile_try(SEXP filePathSEXP, SEXP overwriteSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::traits::input_parameter< std::string >::type filePath(filePathSEXP );
        Rcpp::traits::input_parameter< int >::type overwrite(overwriteSEXP );
        int __result = h5CreateFile(filePath, overwrite);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP activeH5_h5CreateFile(SEXP filePathSEXP, SEXP overwriteSEXP) {
    SEXP __result;
    {
        Rcpp::RNGScope __rngScope;
        __result = PROTECT(activeH5_h5CreateFile_try(filePathSEXP, overwriteSEXP));
    }
    Rboolean __isInterrupt = Rf_inherits(__result, "interrupted-error");
    if (__isInterrupt) {
        UNPROTECT(1);
        Rf_onintr();
    }
    Rboolean __isError = Rf_inherits(__result, "try-error");
    if (__isError) {
        SEXP __msgSEXP = Rf_asChar(__result);
        UNPROTECT(1);
        Rf_error(CHAR(__msgSEXP));
    }
    UNPROTECT(1);
    return __result;
}
// h5CreateMetaData
int h5CreateMetaData(std::string filePath);
static SEXP activeH5_h5CreateMetaData_try(SEXP filePathSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::traits::input_parameter< std::string >::type filePath(filePathSEXP );
        int __result = h5CreateMetaData(filePath);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP activeH5_h5CreateMetaData(SEXP filePathSEXP) {
    SEXP __result;
    {
        Rcpp::RNGScope __rngScope;
        __result = PROTECT(activeH5_h5CreateMetaData_try(filePathSEXP));
    }
    Rboolean __isInterrupt = Rf_inherits(__result, "interrupted-error");
    if (__isInterrupt) {
        UNPROTECT(1);
        Rf_onintr();
    }
    Rboolean __isError = Rf_inherits(__result, "try-error");
    if (__isError) {
        SEXP __msgSEXP = Rf_asChar(__result);
        UNPROTECT(1);
        Rf_error(CHAR(__msgSEXP));
    }
    UNPROTECT(1);
    return __result;
}
// h5WriteCharVector
int h5WriteCharVector(std::string charName, SEXP charVec, std::string filePath, int update);
static SEXP activeH5_h5WriteCharVector_try(SEXP charNameSEXP, SEXP charVecSEXP, SEXP filePathSEXP, SEXP updateSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::traits::input_parameter< std::string >::type charName(charNameSEXP );
        Rcpp::traits::input_parameter< SEXP >::type charVec(charVecSEXP );
        Rcpp::traits::input_parameter< std::string >::type filePath(filePathSEXP );
        Rcpp::traits::input_parameter< int >::type update(updateSEXP );
        int __result = h5WriteCharVector(charName, charVec, filePath, update);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP activeH5_h5WriteCharVector(SEXP charNameSEXP, SEXP charVecSEXP, SEXP filePathSEXP, SEXP updateSEXP) {
    SEXP __result;
    {
        Rcpp::RNGScope __rngScope;
        __result = PROTECT(activeH5_h5WriteCharVector_try(charNameSEXP, charVecSEXP, filePathSEXP, updateSEXP));
    }
    Rboolean __isInterrupt = Rf_inherits(__result, "interrupted-error");
    if (__isInterrupt) {
        UNPROTECT(1);
        Rf_onintr();
    }
    Rboolean __isError = Rf_inherits(__result, "try-error");
    if (__isError) {
        SEXP __msgSEXP = Rf_asChar(__result);
        UNPROTECT(1);
        Rf_error(CHAR(__msgSEXP));
    }
    UNPROTECT(1);
    return __result;
}
// h5WriteInt
int h5WriteInt(std::string intName, int integer, std::string filePath, int update);
static SEXP activeH5_h5WriteInt_try(SEXP intNameSEXP, SEXP integerSEXP, SEXP filePathSEXP, SEXP updateSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::traits::input_parameter< std::string >::type intName(intNameSEXP );
        Rcpp::traits::input_parameter< int >::type integer(integerSEXP );
        Rcpp::traits::input_parameter< std::string >::type filePath(filePathSEXP );
        Rcpp::traits::input_parameter< int >::type update(updateSEXP );
        int __result = h5WriteInt(intName, integer, filePath, update);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP activeH5_h5WriteInt(SEXP intNameSEXP, SEXP integerSEXP, SEXP filePathSEXP, SEXP updateSEXP) {
    SEXP __result;
    {
        Rcpp::RNGScope __rngScope;
        __result = PROTECT(activeH5_h5WriteInt_try(intNameSEXP, integerSEXP, filePathSEXP, updateSEXP));
    }
    Rboolean __isInterrupt = Rf_inherits(__result, "interrupted-error");
    if (__isInterrupt) {
        UNPROTECT(1);
        Rf_onintr();
    }
    Rboolean __isError = Rf_inherits(__result, "try-error");
    if (__isError) {
        SEXP __msgSEXP = Rf_asChar(__result);
        UNPROTECT(1);
        Rf_error(CHAR(__msgSEXP));
    }
    UNPROTECT(1);
    return __result;
}
// h5WriteFactor
int h5WriteFactor(std::string charName, SEXP charVec, std::string filePath, int update);
static SEXP activeH5_h5WriteFactor_try(SEXP charNameSEXP, SEXP charVecSEXP, SEXP filePathSEXP, SEXP updateSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::traits::input_parameter< std::string >::type charName(charNameSEXP );
        Rcpp::traits::input_parameter< SEXP >::type charVec(charVecSEXP );
        Rcpp::traits::input_parameter< std::string >::type filePath(filePathSEXP );
        Rcpp::traits::input_parameter< int >::type update(updateSEXP );
        int __result = h5WriteFactor(charName, charVec, filePath, update);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP activeH5_h5WriteFactor(SEXP charNameSEXP, SEXP charVecSEXP, SEXP filePathSEXP, SEXP updateSEXP) {
    SEXP __result;
    {
        Rcpp::RNGScope __rngScope;
        __result = PROTECT(activeH5_h5WriteFactor_try(charNameSEXP, charVecSEXP, filePathSEXP, updateSEXP));
    }
    Rboolean __isInterrupt = Rf_inherits(__result, "interrupted-error");
    if (__isInterrupt) {
        UNPROTECT(1);
        Rf_onintr();
    }
    Rboolean __isError = Rf_inherits(__result, "try-error");
    if (__isError) {
        SEXP __msgSEXP = Rf_asChar(__result);
        UNPROTECT(1);
        Rf_error(CHAR(__msgSEXP));
    }
    UNPROTECT(1);
    return __result;
}
// h5WriteDoubleMat
int h5WriteDoubleMat(std::string dset, SEXP chunk, NumericVector dim, std::string filePath);
static SEXP activeH5_h5WriteDoubleMat_try(SEXP dsetSEXP, SEXP chunkSEXP, SEXP dimSEXP, SEXP filePathSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::traits::input_parameter< std::string >::type dset(dsetSEXP );
        Rcpp::traits::input_parameter< SEXP >::type chunk(chunkSEXP );
        Rcpp::traits::input_parameter< NumericVector >::type dim(dimSEXP );
        Rcpp::traits::input_parameter< std::string >::type filePath(filePathSEXP );
        int __result = h5WriteDoubleMat(dset, chunk, dim, filePath);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP activeH5_h5WriteDoubleMat(SEXP dsetSEXP, SEXP chunkSEXP, SEXP dimSEXP, SEXP filePathSEXP) {
    SEXP __result;
    {
        Rcpp::RNGScope __rngScope;
        __result = PROTECT(activeH5_h5WriteDoubleMat_try(dsetSEXP, chunkSEXP, dimSEXP, filePathSEXP));
    }
    Rboolean __isInterrupt = Rf_inherits(__result, "interrupted-error");
    if (__isInterrupt) {
        UNPROTECT(1);
        Rf_onintr();
    }
    Rboolean __isError = Rf_inherits(__result, "try-error");
    if (__isError) {
        SEXP __msgSEXP = Rf_asChar(__result);
        UNPROTECT(1);
        Rf_error(CHAR(__msgSEXP));
    }
    UNPROTECT(1);
    return __result;
}
// h5FlushFile
int h5FlushFile(std::string filePath);
static SEXP activeH5_h5FlushFile_try(SEXP filePathSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::traits::input_parameter< std::string >::type filePath(filePathSEXP );
        int __result = h5FlushFile(filePath);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP activeH5_h5FlushFile(SEXP filePathSEXP) {
    SEXP __result;
    {
        Rcpp::RNGScope __rngScope;
        __result = PROTECT(activeH5_h5FlushFile_try(filePathSEXP));
    }
    Rboolean __isInterrupt = Rf_inherits(__result, "interrupted-error");
    if (__isInterrupt) {
        UNPROTECT(1);
        Rf_onintr();
    }
    Rboolean __isError = Rf_inherits(__result, "try-error");
    if (__isError) {
        SEXP __msgSEXP = Rf_asChar(__result);
        UNPROTECT(1);
        Rf_error(CHAR(__msgSEXP));
    }
    UNPROTECT(1);
    return __result;
}
// h5CloseFile
int h5CloseFile(std::string filePath);
static SEXP activeH5_h5CloseFile_try(SEXP filePathSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::traits::input_parameter< std::string >::type filePath(filePathSEXP );
        int __result = h5CloseFile(filePath);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP activeH5_h5CloseFile(SEXP filePathSEXP) {
    SEXP __result;
    {
        Rcpp::RNGScope __rngScope;
        __result = PROTECT(activeH5_h5CloseFile_try(filePathSEXP));
    }
    Rboolean __isInterrupt = Rf_inherits(__result, "interrupted-error");
    if (__isInterrupt) {
        UNPROTECT(1);
        Rf_onintr();
    }
    Rboolean __isError = Rf_inherits(__result, "try-error");
    if (__isError) {
        SEXP __msgSEXP = Rf_asChar(__result);
        UNPROTECT(1);
        Rf_error(CHAR(__msgSEXP));
    }
    UNPROTECT(1);
    return __result;
}
// h5ReadCharVector
SEXP h5ReadCharVector(std::string charName, std::string filePath);
static SEXP activeH5_h5ReadCharVector_try(SEXP charNameSEXP, SEXP filePathSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::traits::input_parameter< std::string >::type charName(charNameSEXP );
        Rcpp::traits::input_parameter< std::string >::type filePath(filePathSEXP );
        SEXP __result = h5ReadCharVector(charName, filePath);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP activeH5_h5ReadCharVector(SEXP charNameSEXP, SEXP filePathSEXP) {
    SEXP __result;
    {
        Rcpp::RNGScope __rngScope;
        __result = PROTECT(activeH5_h5ReadCharVector_try(charNameSEXP, filePathSEXP));
    }
    Rboolean __isInterrupt = Rf_inherits(__result, "interrupted-error");
    if (__isInterrupt) {
        UNPROTECT(1);
        Rf_onintr();
    }
    Rboolean __isError = Rf_inherits(__result, "try-error");
    if (__isError) {
        SEXP __msgSEXP = Rf_asChar(__result);
        UNPROTECT(1);
        Rf_error(CHAR(__msgSEXP));
    }
    UNPROTECT(1);
    return __result;
}
// h5ReadFactor
SEXP h5ReadFactor(std::string charName, std::string filePath);
static SEXP activeH5_h5ReadFactor_try(SEXP charNameSEXP, SEXP filePathSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::traits::input_parameter< std::string >::type charName(charNameSEXP );
        Rcpp::traits::input_parameter< std::string >::type filePath(filePathSEXP );
        SEXP __result = h5ReadFactor(charName, filePath);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP activeH5_h5ReadFactor(SEXP charNameSEXP, SEXP filePathSEXP) {
    SEXP __result;
    {
        Rcpp::RNGScope __rngScope;
        __result = PROTECT(activeH5_h5ReadFactor_try(charNameSEXP, filePathSEXP));
    }
    Rboolean __isInterrupt = Rf_inherits(__result, "interrupted-error");
    if (__isInterrupt) {
        UNPROTECT(1);
        Rf_onintr();
    }
    Rboolean __isError = Rf_inherits(__result, "try-error");
    if (__isError) {
        SEXP __msgSEXP = Rf_asChar(__result);
        UNPROTECT(1);
        Rf_error(CHAR(__msgSEXP));
    }
    UNPROTECT(1);
    return __result;
}
// h5ReadInt
int h5ReadInt(std::string intName, std::string filePath);
static SEXP activeH5_h5ReadInt_try(SEXP intNameSEXP, SEXP filePathSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::traits::input_parameter< std::string >::type intName(intNameSEXP );
        Rcpp::traits::input_parameter< std::string >::type filePath(filePathSEXP );
        int __result = h5ReadInt(intName, filePath);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP activeH5_h5ReadInt(SEXP intNameSEXP, SEXP filePathSEXP) {
    SEXP __result;
    {
        Rcpp::RNGScope __rngScope;
        __result = PROTECT(activeH5_h5ReadInt_try(intNameSEXP, filePathSEXP));
    }
    Rboolean __isInterrupt = Rf_inherits(__result, "interrupted-error");
    if (__isInterrupt) {
        UNPROTECT(1);
        Rf_onintr();
    }
    Rboolean __isError = Rf_inherits(__result, "try-error");
    if (__isError) {
        SEXP __msgSEXP = Rf_asChar(__result);
        UNPROTECT(1);
        Rf_error(CHAR(__msgSEXP));
    }
    UNPROTECT(1);
    return __result;
}
// h5ReadDoubleMat
SEXP h5ReadDoubleMat(std::string chunkName, std::string filePath);
static SEXP activeH5_h5ReadDoubleMat_try(SEXP chunkNameSEXP, SEXP filePathSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::traits::input_parameter< std::string >::type chunkName(chunkNameSEXP );
        Rcpp::traits::input_parameter< std::string >::type filePath(filePathSEXP );
        SEXP __result = h5ReadDoubleMat(chunkName, filePath);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP activeH5_h5ReadDoubleMat(SEXP chunkNameSEXP, SEXP filePathSEXP) {
    SEXP __result;
    {
        Rcpp::RNGScope __rngScope;
        __result = PROTECT(activeH5_h5ReadDoubleMat_try(chunkNameSEXP, filePathSEXP));
    }
    Rboolean __isInterrupt = Rf_inherits(__result, "interrupted-error");
    if (__isInterrupt) {
        UNPROTECT(1);
        Rf_onintr();
    }
    Rboolean __isError = Rf_inherits(__result, "try-error");
    if (__isError) {
        SEXP __msgSEXP = Rf_asChar(__result);
        UNPROTECT(1);
        Rf_error(CHAR(__msgSEXP));
    }
    UNPROTECT(1);
    return __result;
}
// h5DummyRead
int h5DummyRead(std::string chunkName, std::string filePath);
static SEXP activeH5_h5DummyRead_try(SEXP chunkNameSEXP, SEXP filePathSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::traits::input_parameter< std::string >::type chunkName(chunkNameSEXP );
        Rcpp::traits::input_parameter< std::string >::type filePath(filePathSEXP );
        int __result = h5DummyRead(chunkName, filePath);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP activeH5_h5DummyRead(SEXP chunkNameSEXP, SEXP filePathSEXP) {
    SEXP __result;
    {
        Rcpp::RNGScope __rngScope;
        __result = PROTECT(activeH5_h5DummyRead_try(chunkNameSEXP, filePathSEXP));
    }
    Rboolean __isInterrupt = Rf_inherits(__result, "interrupted-error");
    if (__isInterrupt) {
        UNPROTECT(1);
        Rf_onintr();
    }
    Rboolean __isError = Rf_inherits(__result, "try-error");
    if (__isError) {
        SEXP __msgSEXP = Rf_asChar(__result);
        UNPROTECT(1);
        Rf_error(CHAR(__msgSEXP));
    }
    UNPROTECT(1);
    return __result;
}
// h5ModelFrame
SEXP h5ModelFrame(std::string chunkName, SEXP selCols_, std::string filePath);
static SEXP activeH5_h5ModelFrame_try(SEXP chunkNameSEXP, SEXP selCols_SEXP, SEXP filePathSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::traits::input_parameter< std::string >::type chunkName(chunkNameSEXP );
        Rcpp::traits::input_parameter< SEXP >::type selCols_(selCols_SEXP );
        Rcpp::traits::input_parameter< std::string >::type filePath(filePathSEXP );
        SEXP __result = h5ModelFrame(chunkName, selCols_, filePath);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP activeH5_h5ModelFrame(SEXP chunkNameSEXP, SEXP selCols_SEXP, SEXP filePathSEXP) {
    SEXP __result;
    {
        Rcpp::RNGScope __rngScope;
        __result = PROTECT(activeH5_h5ModelFrame_try(chunkNameSEXP, selCols_SEXP, filePathSEXP));
    }
    Rboolean __isInterrupt = Rf_inherits(__result, "interrupted-error");
    if (__isInterrupt) {
        UNPROTECT(1);
        Rf_onintr();
    }
    Rboolean __isError = Rf_inherits(__result, "try-error");
    if (__isError) {
        SEXP __msgSEXP = Rf_asChar(__result);
        UNPROTECT(1);
        Rf_error(CHAR(__msgSEXP));
    }
    UNPROTECT(1);
    return __result;
}
// h5ChunkList
SEXP h5ChunkList(std::string chunkName, std::string filePath);
static SEXP activeH5_h5ChunkList_try(SEXP chunkNameSEXP, SEXP filePathSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::traits::input_parameter< std::string >::type chunkName(chunkNameSEXP );
        Rcpp::traits::input_parameter< std::string >::type filePath(filePathSEXP );
        SEXP __result = h5ChunkList(chunkName, filePath);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP activeH5_h5ChunkList(SEXP chunkNameSEXP, SEXP filePathSEXP) {
    SEXP __result;
    {
        Rcpp::RNGScope __rngScope;
        __result = PROTECT(activeH5_h5ChunkList_try(chunkNameSEXP, filePathSEXP));
    }
    Rboolean __isInterrupt = Rf_inherits(__result, "interrupted-error");
    if (__isInterrupt) {
        UNPROTECT(1);
        Rf_onintr();
    }
    Rboolean __isError = Rf_inherits(__result, "try-error");
    if (__isError) {
        SEXP __msgSEXP = Rf_asChar(__result);
        UNPROTECT(1);
        Rf_error(CHAR(__msgSEXP));
    }
    UNPROTECT(1);
    return __result;
}
// h5ChunkSel
SEXP h5ChunkSel(std::string chunkName, SEXP selCols, std::string filePath);
static SEXP activeH5_h5ChunkSel_try(SEXP chunkNameSEXP, SEXP selColsSEXP, SEXP filePathSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::traits::input_parameter< std::string >::type chunkName(chunkNameSEXP );
        Rcpp::traits::input_parameter< SEXP >::type selCols(selColsSEXP );
        Rcpp::traits::input_parameter< std::string >::type filePath(filePathSEXP );
        SEXP __result = h5ChunkSel(chunkName, selCols, filePath);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP activeH5_h5ChunkSel(SEXP chunkNameSEXP, SEXP selColsSEXP, SEXP filePathSEXP) {
    SEXP __result;
    {
        Rcpp::RNGScope __rngScope;
        __result = PROTECT(activeH5_h5ChunkSel_try(chunkNameSEXP, selColsSEXP, filePathSEXP));
    }
    Rboolean __isInterrupt = Rf_inherits(__result, "interrupted-error");
    if (__isInterrupt) {
        UNPROTECT(1);
        Rf_onintr();
    }
    Rboolean __isError = Rf_inherits(__result, "try-error");
    if (__isError) {
        SEXP __msgSEXP = Rf_asChar(__result);
        UNPROTECT(1);
        Rf_error(CHAR(__msgSEXP));
    }
    UNPROTECT(1);
    return __result;
}
// h5ReadDoubleMat2
SEXP h5ReadDoubleMat2(std::string chunkName, std::string filePath);
static SEXP activeH5_h5ReadDoubleMat2_try(SEXP chunkNameSEXP, SEXP filePathSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::traits::input_parameter< std::string >::type chunkName(chunkNameSEXP );
        Rcpp::traits::input_parameter< std::string >::type filePath(filePathSEXP );
        SEXP __result = h5ReadDoubleMat2(chunkName, filePath);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP activeH5_h5ReadDoubleMat2(SEXP chunkNameSEXP, SEXP filePathSEXP) {
    SEXP __result;
    {
        Rcpp::RNGScope __rngScope;
        __result = PROTECT(activeH5_h5ReadDoubleMat2_try(chunkNameSEXP, filePathSEXP));
    }
    Rboolean __isInterrupt = Rf_inherits(__result, "interrupted-error");
    if (__isInterrupt) {
        UNPROTECT(1);
        Rf_onintr();
    }
    Rboolean __isError = Rf_inherits(__result, "try-error");
    if (__isError) {
        SEXP __msgSEXP = Rf_asChar(__result);
        UNPROTECT(1);
        Rf_error(CHAR(__msgSEXP));
    }
    UNPROTECT(1);
    return __result;
}
// h5ReadDoubleMat3
SEXP h5ReadDoubleMat3(std::string chunkName, std::string filePath);
static SEXP activeH5_h5ReadDoubleMat3_try(SEXP chunkNameSEXP, SEXP filePathSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::traits::input_parameter< std::string >::type chunkName(chunkNameSEXP );
        Rcpp::traits::input_parameter< std::string >::type filePath(filePathSEXP );
        SEXP __result = h5ReadDoubleMat3(chunkName, filePath);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP activeH5_h5ReadDoubleMat3(SEXP chunkNameSEXP, SEXP filePathSEXP) {
    SEXP __result;
    {
        Rcpp::RNGScope __rngScope;
        __result = PROTECT(activeH5_h5ReadDoubleMat3_try(chunkNameSEXP, filePathSEXP));
    }
    Rboolean __isInterrupt = Rf_inherits(__result, "interrupted-error");
    if (__isInterrupt) {
        UNPROTECT(1);
        Rf_onintr();
    }
    Rboolean __isError = Rf_inherits(__result, "try-error");
    if (__isError) {
        SEXP __msgSEXP = Rf_asChar(__result);
        UNPROTECT(1);
        Rf_error(CHAR(__msgSEXP));
    }
    UNPROTECT(1);
    return __result;
}
// h5WriteMemMAT
SEXP h5WriteMemMAT(NumericMatrix obj);
static SEXP activeH5_h5WriteMemMAT_try(SEXP objSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::traits::input_parameter< NumericMatrix >::type obj(objSEXP );
        SEXP __result = h5WriteMemMAT(obj);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP activeH5_h5WriteMemMAT(SEXP objSEXP) {
    SEXP __result;
    {
        Rcpp::RNGScope __rngScope;
        __result = PROTECT(activeH5_h5WriteMemMAT_try(objSEXP));
    }
    Rboolean __isInterrupt = Rf_inherits(__result, "interrupted-error");
    if (__isInterrupt) {
        UNPROTECT(1);
        Rf_onintr();
    }
    Rboolean __isError = Rf_inherits(__result, "try-error");
    if (__isError) {
        SEXP __msgSEXP = Rf_asChar(__result);
        UNPROTECT(1);
        Rf_error(CHAR(__msgSEXP));
    }
    UNPROTECT(1);
    return __result;
}
// h5WriteMemDF
SEXP h5WriteMemDF(DataFrame obj);
static SEXP activeH5_h5WriteMemDF_try(SEXP objSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::traits::input_parameter< DataFrame >::type obj(objSEXP );
        SEXP __result = h5WriteMemDF(obj);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP activeH5_h5WriteMemDF(SEXP objSEXP) {
    SEXP __result;
    {
        Rcpp::RNGScope __rngScope;
        __result = PROTECT(activeH5_h5WriteMemDF_try(objSEXP));
    }
    Rboolean __isInterrupt = Rf_inherits(__result, "interrupted-error");
    if (__isInterrupt) {
        UNPROTECT(1);
        Rf_onintr();
    }
    Rboolean __isError = Rf_inherits(__result, "try-error");
    if (__isError) {
        SEXP __msgSEXP = Rf_asChar(__result);
        UNPROTECT(1);
        Rf_error(CHAR(__msgSEXP));
    }
    UNPROTECT(1);
    return __result;
}
// h5ReadMemMAT
NumericMatrix h5ReadMemMAT(SEXP ptr);
static SEXP activeH5_h5ReadMemMAT_try(SEXP ptrSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::traits::input_parameter< SEXP >::type ptr(ptrSEXP );
        NumericMatrix __result = h5ReadMemMAT(ptr);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP activeH5_h5ReadMemMAT(SEXP ptrSEXP) {
    SEXP __result;
    {
        Rcpp::RNGScope __rngScope;
        __result = PROTECT(activeH5_h5ReadMemMAT_try(ptrSEXP));
    }
    Rboolean __isInterrupt = Rf_inherits(__result, "interrupted-error");
    if (__isInterrupt) {
        UNPROTECT(1);
        Rf_onintr();
    }
    Rboolean __isError = Rf_inherits(__result, "try-error");
    if (__isError) {
        SEXP __msgSEXP = Rf_asChar(__result);
        UNPROTECT(1);
        Rf_error(CHAR(__msgSEXP));
    }
    UNPROTECT(1);
    return __result;
}
// h5ReadMemDF
DataFrame h5ReadMemDF(SEXP ptr);
static SEXP activeH5_h5ReadMemDF_try(SEXP ptrSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::traits::input_parameter< SEXP >::type ptr(ptrSEXP );
        DataFrame __result = h5ReadMemDF(ptr);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP activeH5_h5ReadMemDF(SEXP ptrSEXP) {
    SEXP __result;
    {
        Rcpp::RNGScope __rngScope;
        __result = PROTECT(activeH5_h5ReadMemDF_try(ptrSEXP));
    }
    Rboolean __isInterrupt = Rf_inherits(__result, "interrupted-error");
    if (__isInterrupt) {
        UNPROTECT(1);
        Rf_onintr();
    }
    Rboolean __isError = Rf_inherits(__result, "try-error");
    if (__isError) {
        SEXP __msgSEXP = Rf_asChar(__result);
        UNPROTECT(1);
        Rf_error(CHAR(__msgSEXP));
    }
    UNPROTECT(1);
    return __result;
}

// validate (ensure exported C++ functions exist before calling them)
static int activeH5_RcppExport_validate(const char* sig) { 
    static std::set<std::string> signatures;
    if (signatures.empty()) {
        signatures.insert("SEXP(*createFactor)(NumericVector,CharacterVector)");
        signatures.insert("int(*h5CreateFile)(std::string,int)");
        signatures.insert("int(*h5CreateMetaData)(std::string)");
        signatures.insert("int(*h5WriteCharVector)(std::string,SEXP,std::string,int)");
        signatures.insert("int(*h5WriteInt)(std::string,int,std::string,int)");
        signatures.insert("int(*h5WriteFactor)(std::string,SEXP,std::string,int)");
        signatures.insert("int(*h5WriteDoubleMat)(std::string,SEXP,NumericVector,std::string)");
        signatures.insert("int(*h5FlushFile)(std::string)");
        signatures.insert("int(*h5CloseFile)(std::string)");
        signatures.insert("SEXP(*h5ReadCharVector)(std::string,std::string)");
        signatures.insert("SEXP(*h5ReadFactor)(std::string,std::string)");
        signatures.insert("int(*h5ReadInt)(std::string,std::string)");
        signatures.insert("SEXP(*h5ReadDoubleMat)(std::string,std::string)");
        signatures.insert("int(*h5DummyRead)(std::string,std::string)");
        signatures.insert("SEXP(*h5ModelFrame)(std::string,SEXP,std::string)");
        signatures.insert("SEXP(*h5ChunkList)(std::string,std::string)");
        signatures.insert("SEXP(*h5ChunkSel)(std::string,SEXP,std::string)");
        signatures.insert("SEXP(*h5ReadDoubleMat2)(std::string,std::string)");
        signatures.insert("SEXP(*h5ReadDoubleMat3)(std::string,std::string)");
        signatures.insert("SEXP(*h5WriteMemMAT)(NumericMatrix)");
        signatures.insert("SEXP(*h5WriteMemDF)(DataFrame)");
        signatures.insert("NumericMatrix(*h5ReadMemMAT)(SEXP)");
        signatures.insert("DataFrame(*h5ReadMemDF)(SEXP)");
    }
    return signatures.find(sig) != signatures.end();
}

// registerCCallable (register entry points for exported C++ functions)
RcppExport SEXP activeH5_RcppExport_registerCCallable() { 
    R_RegisterCCallable("activeH5", "activeH5_createFactor", (DL_FUNC)activeH5_createFactor_try);
    R_RegisterCCallable("activeH5", "activeH5_h5CreateFile", (DL_FUNC)activeH5_h5CreateFile_try);
    R_RegisterCCallable("activeH5", "activeH5_h5CreateMetaData", (DL_FUNC)activeH5_h5CreateMetaData_try);
    R_RegisterCCallable("activeH5", "activeH5_h5WriteCharVector", (DL_FUNC)activeH5_h5WriteCharVector_try);
    R_RegisterCCallable("activeH5", "activeH5_h5WriteInt", (DL_FUNC)activeH5_h5WriteInt_try);
    R_RegisterCCallable("activeH5", "activeH5_h5WriteFactor", (DL_FUNC)activeH5_h5WriteFactor_try);
    R_RegisterCCallable("activeH5", "activeH5_h5WriteDoubleMat", (DL_FUNC)activeH5_h5WriteDoubleMat_try);
    R_RegisterCCallable("activeH5", "activeH5_h5FlushFile", (DL_FUNC)activeH5_h5FlushFile_try);
    R_RegisterCCallable("activeH5", "activeH5_h5CloseFile", (DL_FUNC)activeH5_h5CloseFile_try);
    R_RegisterCCallable("activeH5", "activeH5_h5ReadCharVector", (DL_FUNC)activeH5_h5ReadCharVector_try);
    R_RegisterCCallable("activeH5", "activeH5_h5ReadFactor", (DL_FUNC)activeH5_h5ReadFactor_try);
    R_RegisterCCallable("activeH5", "activeH5_h5ReadInt", (DL_FUNC)activeH5_h5ReadInt_try);
    R_RegisterCCallable("activeH5", "activeH5_h5ReadDoubleMat", (DL_FUNC)activeH5_h5ReadDoubleMat_try);
    R_RegisterCCallable("activeH5", "activeH5_h5DummyRead", (DL_FUNC)activeH5_h5DummyRead_try);
    R_RegisterCCallable("activeH5", "activeH5_h5ModelFrame", (DL_FUNC)activeH5_h5ModelFrame_try);
    R_RegisterCCallable("activeH5", "activeH5_h5ChunkList", (DL_FUNC)activeH5_h5ChunkList_try);
    R_RegisterCCallable("activeH5", "activeH5_h5ChunkSel", (DL_FUNC)activeH5_h5ChunkSel_try);
    R_RegisterCCallable("activeH5", "activeH5_h5ReadDoubleMat2", (DL_FUNC)activeH5_h5ReadDoubleMat2_try);
    R_RegisterCCallable("activeH5", "activeH5_h5ReadDoubleMat3", (DL_FUNC)activeH5_h5ReadDoubleMat3_try);
    R_RegisterCCallable("activeH5", "activeH5_h5WriteMemMAT", (DL_FUNC)activeH5_h5WriteMemMAT_try);
    R_RegisterCCallable("activeH5", "activeH5_h5WriteMemDF", (DL_FUNC)activeH5_h5WriteMemDF_try);
    R_RegisterCCallable("activeH5", "activeH5_h5ReadMemMAT", (DL_FUNC)activeH5_h5ReadMemMAT_try);
    R_RegisterCCallable("activeH5", "activeH5_h5ReadMemDF", (DL_FUNC)activeH5_h5ReadMemDF_try);
    R_RegisterCCallable("activeH5", "activeH5_RcppExport_validate", (DL_FUNC)activeH5_RcppExport_validate);
    return R_NilValue;
}
