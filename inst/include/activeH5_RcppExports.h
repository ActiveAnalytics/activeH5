// This file was generated by Rcpp::compileAttributes
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#ifndef __activeH5_RcppExports_h__
#define __activeH5_RcppExports_h__

#include <Rcpp.h>

namespace activeH5 {

    using namespace Rcpp;

    namespace {
        void validateSignature(const char* sig) {
            Rcpp::Function require = Rcpp::Environment::base_env()["require"];
            require("activeH5", Rcpp::Named("quietly") = true);
            typedef int(*Ptr_validate)(const char*);
            static Ptr_validate p_validate = (Ptr_validate)
                R_GetCCallable("activeH5", "activeH5_RcppExport_validate");
            if (!p_validate(sig)) {
                throw Rcpp::function_not_exported(
                    "C++ function with signature '" + std::string(sig) + "' not found in activeH5");
            }
        }
    }

    inline SEXP createFactor(NumericVector x, CharacterVector levels) {
        typedef SEXP(*Ptr_createFactor)(SEXP,SEXP);
        static Ptr_createFactor p_createFactor = NULL;
        if (p_createFactor == NULL) {
            validateSignature("SEXP(*createFactor)(NumericVector,CharacterVector)");
            p_createFactor = (Ptr_createFactor)R_GetCCallable("activeH5", "activeH5_createFactor");
        }
        RObject __result;
        {
            RNGScope __rngScope;
            __result = p_createFactor(Rcpp::wrap(x), Rcpp::wrap(levels));
        }
        if (__result.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (__result.inherits("try-error"))
            throw Rcpp::exception(as<std::string>(__result).c_str());
        return Rcpp::as<SEXP >(__result);
    }

    inline int h5CreateFile(std::string filePath, int overwrite) {
        typedef SEXP(*Ptr_h5CreateFile)(SEXP,SEXP);
        static Ptr_h5CreateFile p_h5CreateFile = NULL;
        if (p_h5CreateFile == NULL) {
            validateSignature("int(*h5CreateFile)(std::string,int)");
            p_h5CreateFile = (Ptr_h5CreateFile)R_GetCCallable("activeH5", "activeH5_h5CreateFile");
        }
        RObject __result;
        {
            RNGScope __rngScope;
            __result = p_h5CreateFile(Rcpp::wrap(filePath), Rcpp::wrap(overwrite));
        }
        if (__result.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (__result.inherits("try-error"))
            throw Rcpp::exception(as<std::string>(__result).c_str());
        return Rcpp::as<int >(__result);
    }

    inline int h5CreateMetaData(std::string filePath) {
        typedef SEXP(*Ptr_h5CreateMetaData)(SEXP);
        static Ptr_h5CreateMetaData p_h5CreateMetaData = NULL;
        if (p_h5CreateMetaData == NULL) {
            validateSignature("int(*h5CreateMetaData)(std::string)");
            p_h5CreateMetaData = (Ptr_h5CreateMetaData)R_GetCCallable("activeH5", "activeH5_h5CreateMetaData");
        }
        RObject __result;
        {
            RNGScope __rngScope;
            __result = p_h5CreateMetaData(Rcpp::wrap(filePath));
        }
        if (__result.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (__result.inherits("try-error"))
            throw Rcpp::exception(as<std::string>(__result).c_str());
        return Rcpp::as<int >(__result);
    }

    inline int h5WriteCharVector(std::string charName, SEXP charVec, std::string filePath, int update) {
        typedef SEXP(*Ptr_h5WriteCharVector)(SEXP,SEXP,SEXP,SEXP);
        static Ptr_h5WriteCharVector p_h5WriteCharVector = NULL;
        if (p_h5WriteCharVector == NULL) {
            validateSignature("int(*h5WriteCharVector)(std::string,SEXP,std::string,int)");
            p_h5WriteCharVector = (Ptr_h5WriteCharVector)R_GetCCallable("activeH5", "activeH5_h5WriteCharVector");
        }
        RObject __result;
        {
            RNGScope __rngScope;
            __result = p_h5WriteCharVector(Rcpp::wrap(charName), Rcpp::wrap(charVec), Rcpp::wrap(filePath), Rcpp::wrap(update));
        }
        if (__result.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (__result.inherits("try-error"))
            throw Rcpp::exception(as<std::string>(__result).c_str());
        return Rcpp::as<int >(__result);
    }

    inline int h5WriteInt(std::string intName, int integer, std::string filePath, int update) {
        typedef SEXP(*Ptr_h5WriteInt)(SEXP,SEXP,SEXP,SEXP);
        static Ptr_h5WriteInt p_h5WriteInt = NULL;
        if (p_h5WriteInt == NULL) {
            validateSignature("int(*h5WriteInt)(std::string,int,std::string,int)");
            p_h5WriteInt = (Ptr_h5WriteInt)R_GetCCallable("activeH5", "activeH5_h5WriteInt");
        }
        RObject __result;
        {
            RNGScope __rngScope;
            __result = p_h5WriteInt(Rcpp::wrap(intName), Rcpp::wrap(integer), Rcpp::wrap(filePath), Rcpp::wrap(update));
        }
        if (__result.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (__result.inherits("try-error"))
            throw Rcpp::exception(as<std::string>(__result).c_str());
        return Rcpp::as<int >(__result);
    }

    inline int h5WriteFactor(std::string charName, SEXP charVec, std::string filePath, int update) {
        typedef SEXP(*Ptr_h5WriteFactor)(SEXP,SEXP,SEXP,SEXP);
        static Ptr_h5WriteFactor p_h5WriteFactor = NULL;
        if (p_h5WriteFactor == NULL) {
            validateSignature("int(*h5WriteFactor)(std::string,SEXP,std::string,int)");
            p_h5WriteFactor = (Ptr_h5WriteFactor)R_GetCCallable("activeH5", "activeH5_h5WriteFactor");
        }
        RObject __result;
        {
            RNGScope __rngScope;
            __result = p_h5WriteFactor(Rcpp::wrap(charName), Rcpp::wrap(charVec), Rcpp::wrap(filePath), Rcpp::wrap(update));
        }
        if (__result.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (__result.inherits("try-error"))
            throw Rcpp::exception(as<std::string>(__result).c_str());
        return Rcpp::as<int >(__result);
    }

    inline int h5WriteDoubleMat(std::string dset, SEXP chunk, NumericVector dim, std::string filePath) {
        typedef SEXP(*Ptr_h5WriteDoubleMat)(SEXP,SEXP,SEXP,SEXP);
        static Ptr_h5WriteDoubleMat p_h5WriteDoubleMat = NULL;
        if (p_h5WriteDoubleMat == NULL) {
            validateSignature("int(*h5WriteDoubleMat)(std::string,SEXP,NumericVector,std::string)");
            p_h5WriteDoubleMat = (Ptr_h5WriteDoubleMat)R_GetCCallable("activeH5", "activeH5_h5WriteDoubleMat");
        }
        RObject __result;
        {
            RNGScope __rngScope;
            __result = p_h5WriteDoubleMat(Rcpp::wrap(dset), Rcpp::wrap(chunk), Rcpp::wrap(dim), Rcpp::wrap(filePath));
        }
        if (__result.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (__result.inherits("try-error"))
            throw Rcpp::exception(as<std::string>(__result).c_str());
        return Rcpp::as<int >(__result);
    }

    inline int h5FlushFile(std::string filePath) {
        typedef SEXP(*Ptr_h5FlushFile)(SEXP);
        static Ptr_h5FlushFile p_h5FlushFile = NULL;
        if (p_h5FlushFile == NULL) {
            validateSignature("int(*h5FlushFile)(std::string)");
            p_h5FlushFile = (Ptr_h5FlushFile)R_GetCCallable("activeH5", "activeH5_h5FlushFile");
        }
        RObject __result;
        {
            RNGScope __rngScope;
            __result = p_h5FlushFile(Rcpp::wrap(filePath));
        }
        if (__result.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (__result.inherits("try-error"))
            throw Rcpp::exception(as<std::string>(__result).c_str());
        return Rcpp::as<int >(__result);
    }

    inline int h5CloseFile(std::string filePath) {
        typedef SEXP(*Ptr_h5CloseFile)(SEXP);
        static Ptr_h5CloseFile p_h5CloseFile = NULL;
        if (p_h5CloseFile == NULL) {
            validateSignature("int(*h5CloseFile)(std::string)");
            p_h5CloseFile = (Ptr_h5CloseFile)R_GetCCallable("activeH5", "activeH5_h5CloseFile");
        }
        RObject __result;
        {
            RNGScope __rngScope;
            __result = p_h5CloseFile(Rcpp::wrap(filePath));
        }
        if (__result.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (__result.inherits("try-error"))
            throw Rcpp::exception(as<std::string>(__result).c_str());
        return Rcpp::as<int >(__result);
    }

    inline SEXP h5ReadCharVector(std::string charName, std::string filePath) {
        typedef SEXP(*Ptr_h5ReadCharVector)(SEXP,SEXP);
        static Ptr_h5ReadCharVector p_h5ReadCharVector = NULL;
        if (p_h5ReadCharVector == NULL) {
            validateSignature("SEXP(*h5ReadCharVector)(std::string,std::string)");
            p_h5ReadCharVector = (Ptr_h5ReadCharVector)R_GetCCallable("activeH5", "activeH5_h5ReadCharVector");
        }
        RObject __result;
        {
            RNGScope __rngScope;
            __result = p_h5ReadCharVector(Rcpp::wrap(charName), Rcpp::wrap(filePath));
        }
        if (__result.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (__result.inherits("try-error"))
            throw Rcpp::exception(as<std::string>(__result).c_str());
        return Rcpp::as<SEXP >(__result);
    }

    inline SEXP h5ReadFactor(std::string charName, std::string filePath) {
        typedef SEXP(*Ptr_h5ReadFactor)(SEXP,SEXP);
        static Ptr_h5ReadFactor p_h5ReadFactor = NULL;
        if (p_h5ReadFactor == NULL) {
            validateSignature("SEXP(*h5ReadFactor)(std::string,std::string)");
            p_h5ReadFactor = (Ptr_h5ReadFactor)R_GetCCallable("activeH5", "activeH5_h5ReadFactor");
        }
        RObject __result;
        {
            RNGScope __rngScope;
            __result = p_h5ReadFactor(Rcpp::wrap(charName), Rcpp::wrap(filePath));
        }
        if (__result.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (__result.inherits("try-error"))
            throw Rcpp::exception(as<std::string>(__result).c_str());
        return Rcpp::as<SEXP >(__result);
    }

    inline int h5ReadInt(std::string intName, std::string filePath) {
        typedef SEXP(*Ptr_h5ReadInt)(SEXP,SEXP);
        static Ptr_h5ReadInt p_h5ReadInt = NULL;
        if (p_h5ReadInt == NULL) {
            validateSignature("int(*h5ReadInt)(std::string,std::string)");
            p_h5ReadInt = (Ptr_h5ReadInt)R_GetCCallable("activeH5", "activeH5_h5ReadInt");
        }
        RObject __result;
        {
            RNGScope __rngScope;
            __result = p_h5ReadInt(Rcpp::wrap(intName), Rcpp::wrap(filePath));
        }
        if (__result.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (__result.inherits("try-error"))
            throw Rcpp::exception(as<std::string>(__result).c_str());
        return Rcpp::as<int >(__result);
    }

    inline SEXP h5ReadDoubleMat(std::string chunkName, std::string filePath) {
        typedef SEXP(*Ptr_h5ReadDoubleMat)(SEXP,SEXP);
        static Ptr_h5ReadDoubleMat p_h5ReadDoubleMat = NULL;
        if (p_h5ReadDoubleMat == NULL) {
            validateSignature("SEXP(*h5ReadDoubleMat)(std::string,std::string)");
            p_h5ReadDoubleMat = (Ptr_h5ReadDoubleMat)R_GetCCallable("activeH5", "activeH5_h5ReadDoubleMat");
        }
        RObject __result;
        {
            RNGScope __rngScope;
            __result = p_h5ReadDoubleMat(Rcpp::wrap(chunkName), Rcpp::wrap(filePath));
        }
        if (__result.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (__result.inherits("try-error"))
            throw Rcpp::exception(as<std::string>(__result).c_str());
        return Rcpp::as<SEXP >(__result);
    }

    inline int h5DummyRead(std::string chunkName, std::string filePath) {
        typedef SEXP(*Ptr_h5DummyRead)(SEXP,SEXP);
        static Ptr_h5DummyRead p_h5DummyRead = NULL;
        if (p_h5DummyRead == NULL) {
            validateSignature("int(*h5DummyRead)(std::string,std::string)");
            p_h5DummyRead = (Ptr_h5DummyRead)R_GetCCallable("activeH5", "activeH5_h5DummyRead");
        }
        RObject __result;
        {
            RNGScope __rngScope;
            __result = p_h5DummyRead(Rcpp::wrap(chunkName), Rcpp::wrap(filePath));
        }
        if (__result.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (__result.inherits("try-error"))
            throw Rcpp::exception(as<std::string>(__result).c_str());
        return Rcpp::as<int >(__result);
    }

    inline SEXP h5ModelFrame(std::string chunkName, SEXP selCols_, std::string filePath) {
        typedef SEXP(*Ptr_h5ModelFrame)(SEXP,SEXP,SEXP);
        static Ptr_h5ModelFrame p_h5ModelFrame = NULL;
        if (p_h5ModelFrame == NULL) {
            validateSignature("SEXP(*h5ModelFrame)(std::string,SEXP,std::string)");
            p_h5ModelFrame = (Ptr_h5ModelFrame)R_GetCCallable("activeH5", "activeH5_h5ModelFrame");
        }
        RObject __result;
        {
            RNGScope __rngScope;
            __result = p_h5ModelFrame(Rcpp::wrap(chunkName), Rcpp::wrap(selCols_), Rcpp::wrap(filePath));
        }
        if (__result.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (__result.inherits("try-error"))
            throw Rcpp::exception(as<std::string>(__result).c_str());
        return Rcpp::as<SEXP >(__result);
    }

    inline SEXP h5ChunkList(std::string chunkName, std::string filePath) {
        typedef SEXP(*Ptr_h5ChunkList)(SEXP,SEXP);
        static Ptr_h5ChunkList p_h5ChunkList = NULL;
        if (p_h5ChunkList == NULL) {
            validateSignature("SEXP(*h5ChunkList)(std::string,std::string)");
            p_h5ChunkList = (Ptr_h5ChunkList)R_GetCCallable("activeH5", "activeH5_h5ChunkList");
        }
        RObject __result;
        {
            RNGScope __rngScope;
            __result = p_h5ChunkList(Rcpp::wrap(chunkName), Rcpp::wrap(filePath));
        }
        if (__result.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (__result.inherits("try-error"))
            throw Rcpp::exception(as<std::string>(__result).c_str());
        return Rcpp::as<SEXP >(__result);
    }

    inline SEXP h5ChunkSel(std::string chunkName, SEXP selCols, std::string filePath) {
        typedef SEXP(*Ptr_h5ChunkSel)(SEXP,SEXP,SEXP);
        static Ptr_h5ChunkSel p_h5ChunkSel = NULL;
        if (p_h5ChunkSel == NULL) {
            validateSignature("SEXP(*h5ChunkSel)(std::string,SEXP,std::string)");
            p_h5ChunkSel = (Ptr_h5ChunkSel)R_GetCCallable("activeH5", "activeH5_h5ChunkSel");
        }
        RObject __result;
        {
            RNGScope __rngScope;
            __result = p_h5ChunkSel(Rcpp::wrap(chunkName), Rcpp::wrap(selCols), Rcpp::wrap(filePath));
        }
        if (__result.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (__result.inherits("try-error"))
            throw Rcpp::exception(as<std::string>(__result).c_str());
        return Rcpp::as<SEXP >(__result);
    }

    inline SEXP h5ReadDoubleMat2(std::string chunkName, std::string filePath) {
        typedef SEXP(*Ptr_h5ReadDoubleMat2)(SEXP,SEXP);
        static Ptr_h5ReadDoubleMat2 p_h5ReadDoubleMat2 = NULL;
        if (p_h5ReadDoubleMat2 == NULL) {
            validateSignature("SEXP(*h5ReadDoubleMat2)(std::string,std::string)");
            p_h5ReadDoubleMat2 = (Ptr_h5ReadDoubleMat2)R_GetCCallable("activeH5", "activeH5_h5ReadDoubleMat2");
        }
        RObject __result;
        {
            RNGScope __rngScope;
            __result = p_h5ReadDoubleMat2(Rcpp::wrap(chunkName), Rcpp::wrap(filePath));
        }
        if (__result.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (__result.inherits("try-error"))
            throw Rcpp::exception(as<std::string>(__result).c_str());
        return Rcpp::as<SEXP >(__result);
    }

    inline SEXP h5ReadDoubleMat3(std::string chunkName, std::string filePath) {
        typedef SEXP(*Ptr_h5ReadDoubleMat3)(SEXP,SEXP);
        static Ptr_h5ReadDoubleMat3 p_h5ReadDoubleMat3 = NULL;
        if (p_h5ReadDoubleMat3 == NULL) {
            validateSignature("SEXP(*h5ReadDoubleMat3)(std::string,std::string)");
            p_h5ReadDoubleMat3 = (Ptr_h5ReadDoubleMat3)R_GetCCallable("activeH5", "activeH5_h5ReadDoubleMat3");
        }
        RObject __result;
        {
            RNGScope __rngScope;
            __result = p_h5ReadDoubleMat3(Rcpp::wrap(chunkName), Rcpp::wrap(filePath));
        }
        if (__result.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (__result.inherits("try-error"))
            throw Rcpp::exception(as<std::string>(__result).c_str());
        return Rcpp::as<SEXP >(__result);
    }

    inline SEXP h5WriteMemMAT(NumericMatrix obj) {
        typedef SEXP(*Ptr_h5WriteMemMAT)(SEXP);
        static Ptr_h5WriteMemMAT p_h5WriteMemMAT = NULL;
        if (p_h5WriteMemMAT == NULL) {
            validateSignature("SEXP(*h5WriteMemMAT)(NumericMatrix)");
            p_h5WriteMemMAT = (Ptr_h5WriteMemMAT)R_GetCCallable("activeH5", "activeH5_h5WriteMemMAT");
        }
        RObject __result;
        {
            RNGScope __rngScope;
            __result = p_h5WriteMemMAT(Rcpp::wrap(obj));
        }
        if (__result.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (__result.inherits("try-error"))
            throw Rcpp::exception(as<std::string>(__result).c_str());
        return Rcpp::as<SEXP >(__result);
    }

    inline SEXP h5WriteMemDF(DataFrame obj) {
        typedef SEXP(*Ptr_h5WriteMemDF)(SEXP);
        static Ptr_h5WriteMemDF p_h5WriteMemDF = NULL;
        if (p_h5WriteMemDF == NULL) {
            validateSignature("SEXP(*h5WriteMemDF)(DataFrame)");
            p_h5WriteMemDF = (Ptr_h5WriteMemDF)R_GetCCallable("activeH5", "activeH5_h5WriteMemDF");
        }
        RObject __result;
        {
            RNGScope __rngScope;
            __result = p_h5WriteMemDF(Rcpp::wrap(obj));
        }
        if (__result.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (__result.inherits("try-error"))
            throw Rcpp::exception(as<std::string>(__result).c_str());
        return Rcpp::as<SEXP >(__result);
    }

    inline NumericMatrix h5ReadMemMAT(SEXP ptr) {
        typedef SEXP(*Ptr_h5ReadMemMAT)(SEXP);
        static Ptr_h5ReadMemMAT p_h5ReadMemMAT = NULL;
        if (p_h5ReadMemMAT == NULL) {
            validateSignature("NumericMatrix(*h5ReadMemMAT)(SEXP)");
            p_h5ReadMemMAT = (Ptr_h5ReadMemMAT)R_GetCCallable("activeH5", "activeH5_h5ReadMemMAT");
        }
        RObject __result;
        {
            RNGScope __rngScope;
            __result = p_h5ReadMemMAT(Rcpp::wrap(ptr));
        }
        if (__result.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (__result.inherits("try-error"))
            throw Rcpp::exception(as<std::string>(__result).c_str());
        return Rcpp::as<NumericMatrix >(__result);
    }

    inline DataFrame h5ReadMemDF(SEXP ptr) {
        typedef SEXP(*Ptr_h5ReadMemDF)(SEXP);
        static Ptr_h5ReadMemDF p_h5ReadMemDF = NULL;
        if (p_h5ReadMemDF == NULL) {
            validateSignature("DataFrame(*h5ReadMemDF)(SEXP)");
            p_h5ReadMemDF = (Ptr_h5ReadMemDF)R_GetCCallable("activeH5", "activeH5_h5ReadMemDF");
        }
        RObject __result;
        {
            RNGScope __rngScope;
            __result = p_h5ReadMemDF(Rcpp::wrap(ptr));
        }
        if (__result.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (__result.inherits("try-error"))
            throw Rcpp::exception(as<std::string>(__result).c_str());
        return Rcpp::as<DataFrame >(__result);
    }

}

#endif // __activeH5_RcppExports_h__
